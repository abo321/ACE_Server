


1. ACE_Select_Reactor_Notify definition

//file: ace/Select_Reactor_Base.h

/**
 * @class ACE_Select_Reactor_Notify
 *
 * @brief Unblock the ACE_Select_Reactor from its event loop.
 *
 * This implementation is necessary for cases where the
 * ACE_Select_Reactor is run in a multi-threaded program.  In
 * this case, we need to be able to unblock @c select or @c poll
 * when updates occur other than in the main
 * ACE_Select_Reactor thread.  To do this, we signal an
 * auto-reset event the ACE_Select_Reactor is listening on.
 * If an ACE_Event_Handler and ACE_Select_Reactor_Mask is
 * passed to @c notify, the appropriate @c handle_* method is
 * dispatched in the context of the ACE_Select_Reactor thread.
 */
class ACE_Export ACE_Select_Reactor_Notify : public ACE_Reactor_Notify
{
public:
    /// Constructor.
    ACE_Select_Reactor_Notify (void);
  
    /// Destructor.
    virtual ~ACE_Select_Reactor_Notify (void);
  
    // = Initialization and termination methods.
    /// Initialize.
    virtual int open (ACE_Reactor_Impl *,
                      ACE_Timer_Queue * = 0,
                      int disable_notify_pipe = ACE_DISABLE_NOTIFY_PIPE_DEFAULT);
  
    /// Destroy.
    virtual int close (void);
  
    /**
     * Called by a thread when it wants to unblock the
     * ACE_Select_Reactor.  This wakeups the ACE_Select_Reactor if
     * currently blocked in @c select/poll.  Pass over both the
     * @c Event_Handler *and* the @c mask to allow the caller to dictate
     * which @c Event_Handler method the ACE_Select_Reactor will
     * invoke.  The ACE_Time_Value indicates how long to blocking
     * trying to notify the ACE_Select_Reactor.  If @a timeout == 0,
     * the caller will block until action is possible, else will wait
     * until the relative time specified in @c *timeout elapses).
     */
    virtual int notify (ACE_Event_Handler * = 0,
                        ACE_Reactor_Mask = ACE_Event_Handler::EXCEPT_MASK,
                        ACE_Time_Value * timeout = 0);
  
    /// Handles pending threads (if any) that are waiting to unblock the
    /// ACE_Select_Reactor.
    virtual int dispatch_notifications (int &number_of_active_handles,
                                        ACE_Handle_Set &rd_mask);
  
    /// Returns the ACE_HANDLE of the notify pipe on which the reactor
    /// is listening for notifications so that other threads can unblock
    /// the Select_Reactor
    virtual ACE_HANDLE notify_handle (void);
  
    /// Handle one of the notify call on the @c handle. This could be
    /// because of a thread trying to unblock the Reactor_Impl
    virtual int dispatch_notify (ACE_Notification_Buffer &buffer);
  
    /// Read one of the notify call on the @a handle into the
    /// @a buffer. This could be because of a thread trying to unblock
    /// the Reactor_Impl
    virtual int read_notify_pipe (ACE_HANDLE handle,
                                  ACE_Notification_Buffer &buffer);
  
    /// Verify whether the buffer has dispatchable info or not.
    virtual int is_dispatchable (ACE_Notification_Buffer &buffer);
  
    /// Called back by the ACE_Select_Reactor when a thread wants to
    /// unblock us.
    virtual int handle_input (ACE_HANDLE handle);
  
    /**
     * Set the maximum number of times that the
     * ACE_Select_Reactor_Notify::handle_input() method will iterate and
     * dispatch the ACE_Event_Handlers that are passed in via the
     * notify pipe before breaking out of its @c recv loop.  By default,
     * this is set to -1, which means "iterate until the pipe is empty."
     * Setting this to a value like "1 or 2" will increase "fairness"
     * (and thus prevent starvation) at the expense of slightly higher
     * dispatching overhead.
     */
    virtual void max_notify_iterations (int);
  
    /**
     * Get the maximum number of times that the
     * ACE_Select_Reactor_Notify::handle_input() method will iterate and
     * dispatch the ACE_Event_Handlers that are passed in via the
     * notify pipe before breaking out of its recv loop.
     */
    virtual int max_notify_iterations (void);
  
    /**
     * Purge any notifications pending in this reactor for the specified
     * ACE_Event_Handler object. If @a eh == 0, all notifications for all
     * handlers are removed (but not any notifications posted just to wake up
     * the reactor itself). Returns the number of notifications purged.
     * Returns -1 on error.
     */
    virtual int purge_pending_notifications (
        ACE_Event_Handler *sh,
        ACE_Reactor_Mask mask = ACE_Event_Handler::ALL_EVENTS_MASK);
  
    /// Dump the state of an object.
    virtual void dump (void) const;
  
    /// Declare the dynamic allocation hooks.
    ACE_ALLOC_HOOK_DECLARE;
  
protected:
    /**
     * Keep a back pointer to the ACE_Select_Reactor.  If this value
     * if NULL then the ACE_Select_Reactor has been initialized with
     * disable_notify_pipe.
     */
    ACE_Select_Reactor_Impl *select_reactor_;
  
    /**
     * Contains the ACE_HANDLE the ACE_Select_Reactor is listening
     * on, as well as the ACE_HANDLE that threads wanting the
     * attention of the ACE_Select_Reactor will write to.
     */
    ACE_Pipe notification_pipe_;
  
    /**
     * Keeps track of the maximum number of times that the
     * ACE_Select_Reactor_Notify::handle_input() method will iterate and
     * dispatch the ACE_Event_Handlers that are passed in via the
     * notify pipe before breaking out of its recv loop.  By default,
     * this is set to -1, which means "iterate until the pipe is empty."
     */
    int max_notify_iterations_;
  
  #if defined (ACE_HAS_REACTOR_NOTIFICATION_QUEUE)
    /**
     * @brief A user-space queue to store the notifications.
     *
     * The notification pipe has OS-specific size restrictions.  That
     * is, no more than a certain number of bytes may be stored in the
     * pipe without blocking.  This limit may be too small for certain
     * applications.  In this case, ACE can be configured to store all
     * the events in user-space.  The pipe is still needed to wake up
     * the reactor thread, but only one event is sent through the pipe
     * at a time.
     */
    ACE_Notification_Queue notification_queue_;
  #endif /* ACE_HAS_REACTOR_NOTIFICATION_QUEUE */
};


2. ACE_Event_Handler definition

//file: ace/Event_Handler.h

/**
 * @class ACE_Event_Handler
 *
 * @brief Provides an abstract interface for handling various types of
 * I/O, timer, and signal events.
 *
 * Subclasses read/write input/output on an I/O descriptor,
 * handle an exception raised on an I/O descriptor, handle a
 * timer's expiration, or handle a signal.
 */
class ACE_Export ACE_Event_Handler
{
public:
    enum
    {
      LO_PRIORITY = 0,
      HI_PRIORITY = 10,
      NULL_MASK = 0,
  #if defined (ACE_USE_POLL)
      READ_MASK = POLLIN,
      WRITE_MASK = POLLOUT,
      EXCEPT_MASK = POLLPRI,
  #else /* USE SELECT */
      READ_MASK = (1 << 0),
      WRITE_MASK = (1 << 1),
      EXCEPT_MASK = (1 << 2),
  #endif /* ACE_USE_POLL */
      ACCEPT_MASK = (1 << 3),
      CONNECT_MASK = (1 << 4),
      TIMER_MASK = (1 << 5),
      QOS_MASK = (1 << 6),
      GROUP_QOS_MASK = (1 << 7),
      SIGNAL_MASK = (1 << 8),
      ALL_EVENTS_MASK = READ_MASK |
                        WRITE_MASK |
                        EXCEPT_MASK |
                        ACCEPT_MASK |
                        CONNECT_MASK |
                        TIMER_MASK |
                        QOS_MASK |
                        GROUP_QOS_MASK |
                        SIGNAL_MASK,
      RWE_MASK = READ_MASK |
                 WRITE_MASK |
                 EXCEPT_MASK,
      DONT_CALL = (1 << 9)
    };
  
    /// Destructor is virtual to enable proper cleanup.
    virtual ~ACE_Event_Handler (void);
  
    //...
  
protected:
    /// Force ACE_Event_Handler to be an abstract base class.
    ACE_Event_Handler (ACE_Reactor * = 0,
                       int priority = ACE_Event_Handler::LO_PRIORITY);
  
    /// Typedef for implementation of reference counting.
    typedef ACE_Atomic_Op<ACE_SYNCH_MUTEX, Reference_Count> Atomic_Reference_Count;
  
    /// Reference count.
    Atomic_Reference_Count reference_count_;
  
private:
  
    /// Priority of this Event_Handler.
    int priority_;
  
    /// Pointer to the various event demultiplexors.
    ACE_Reactor *reactor_;
  
    /// Reference counting requirements.
    Reference_Counting_Policy reference_counting_policy_;
};
